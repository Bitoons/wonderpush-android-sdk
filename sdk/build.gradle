apply plugin: 'com.android.library'

project.group = 'com.wonderpush'
project.archivesBaseName = 'wonderpush-android-sdk'
project.version = "3.4.1-SNAPSHOT"

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 14
        consumerProguardFiles 'proguard-exported.pro'
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        versionName project.version
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    useLibrary 'android.test.runner'
    useLibrary 'android.test.base'
    useLibrary 'android.test.mock'
}

dependencies {
    // Add a dependency on the FCM push service support by default, so
    // that the most common build scenarios don't need to add an
    // explicit dependency on it, and thus we avoid breaking builds.
    runtimeOnly 'com.wonderpush:wonderpush-android-sdk-fcm:[1.0,2.0)'
    // Instrumented tests do not like wonderpush-android-sdk-fcm depending on wonderpush-android-sdk
    // because wonderpush-android-sdk depends on wonderpush-android-sdk-fcm.
    // I expected the dependency on project(':sdk') to be smarted than that.
    configurations.androidTestCompile.exclude(group: 'com.wonderpush', module: 'wonderpush-android-sdk-fcm')

    // This is how we can declare incompatibility with previous modules.
    // This way a newer SDK version can say it is not compatible with
    // previous module versions, whereas the module version can only
    // declare a minimal SDK version.
    // Failing to publish these constraints would allow an older version
    // of the module to accept the newer although incompatible SDK version.
    //constraints {
    //    implementation('com.wonderpush:wonderpush-android-sdk-fcm:[2.0,3.0)') {
    //        because 'ABI changes'
    //    }
    //}

    // Use the full support-v4 instead of the module support-compat
    // because com.google.firebase:firebase-messaging (indirectly) depends on it
    // and all modules must use the same version.
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.google.android.gms:play-services-tasks:16.0.1'
    implementation 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'javax.inject:javax.inject:1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation "com.squareup.picasso:picasso:2.71828"
    implementation "com.squareup.okhttp3:okhttp:3.14.9"
    implementation "com.android.support:exifinterface:28.0.0" // necessary to bump dependency from picasso

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.hamcrest:hamcrest:2.2'
    testImplementation 'org.json:json:20160810'
    testImplementation group: 'com.google.code.findbugs', name: 'jsr305', version: '3.0.2'

    androidTestImplementation 'com.android.support.test:runner:1.0.2'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.2'
}

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xdiags:verbose"
}

apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.release // identical to artifact bundleReleaseAar
                artifact androidSourcesJar
                artifact androidJavadocsJar
            }
            groupId = project.group
            artifactId = project.archivesBaseName
            version = project.version
            pom {
                packaging = 'aar'
                groupId = project.group
                artifactId = 'wonderpush-android-sdk'

                name = 'WonderPush Android SDK'
                description = 'WonderPush Android SDK'
                url = 'https://github.com/wonderpush/wonderpush-android-sdk'

                scm {
                    connection = 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                    developerConnection = 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                    url = 'https://github.com/wonderpush/wonderpush-android-sdk'
                }

                licenses {
                    license {
                        name = 'Apache 2.0'
                        url = 'https://github.com/wonderpush/wonderpush-android-sdk/blob/master/LICENSE.txt'
                        distribution = 'repo'
                    }
                }

                developers {
                    developer {
                        id = 'wonderpush'
                        name = 'WonderPush'
                    }
                }
            }
        }
    }
    repositories {
        maven {
            name = 'wonderpush-android-sdk-repository'
            url = 'https://api.bintray.com/maven/wonderpush/maven/wonderpush-android-sdk/'
            credentials {
                username = wonderpush_publishing_repositories_maven_credentials_username
                password = wonderpush_publishing_repositories_maven_credentials_password
            }
        }
    }
}

afterEvaluate {
    signing {
        useGpgCmd()
        sign publishing.publications
        sign configurations.archives
    }
}

task androidJavadocs(type: Javadoc) {
    title = 'WonderPush Android SDK Reference'
    source = [
            'src/main/java/com/wonderpush/sdk/DeepLinkEvent.java',
            'src/main/java/com/wonderpush/sdk/WonderPush.java',
            'src/main/java/com/wonderpush/sdk/WonderPushAbstractDelegate.java',
            'src/main/java/com/wonderpush/sdk/WonderPushChannel.java',
            'src/main/java/com/wonderpush/sdk/WonderPushChannelGroup.java',
            'src/main/java/com/wonderpush/sdk/WonderPushDelegate.java',
            'src/main/java/com/wonderpush/sdk/WonderPushFirebaseMessagingService.java',
            'src/main/java/com/wonderpush/sdk/WonderPushUserPreferences.java',
            'src/main/java/com/wonderpush/sdk/WonderPushInitializer.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingImpressionListener.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingClickListener.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/Text.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/ModalMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/Button.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/ImageData.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/BannerMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/CardMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/InAppMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/ImageOnlyMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/MessageType.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingDisplayErrorListener.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessaging.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingDisplayCallbacks.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingDisplay.java'
    ] //android.sourceSets.main.java.srcDirs
    doFirst {
        classpath = project.files(
                project.android.libraryVariants.toList().first().javaCompileProvider.get().classpath.files,
                project.android.getBootClasspath(),
                "$projectDir/build/generated/ap_generated_sources/release/out",
                "$projectDir/build/generated/ap_generated_sources/debug/out",
                "$projectDir/build/intermediates/javac/release/compileReleaseJavaWithJavac/classes",
                "$projectDir/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
                android.sourceSets.main.java.srcDirs
        )
    }
    options.overview = project.rootDir.path + '/overview.html'
    options.showFromPublic()
    // JDK 1.8 is more strict then 1.7. Have JDK 1.8 behave like 1.7 for javadoc generation
    options.addStringOption('Xdoclint:none', '-quiet')
}
project.afterEvaluate {
    androidJavadocs.dependsOn(assembleDebug)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    archiveClassifier.set('javadoc')
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'

project.group = 'com.wonderpush'
project.archivesBaseName = 'wonderpush-android-sdk'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_7
        targetCompatibility JavaVersion.VERSION_1_7
    }

    defaultConfig {
        minSdkVersion 14
        consumerProguardFiles 'proguard-exported.pro'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.loopj.android:android-async-http:1.4.9'
    implementation "com.google.firebase:firebase-messaging:20.1.2"
    implementation 'androidx.core:core:1.0.0' // Note: this dependency is already depended on by at least com.google.firebase:firebase-messaging:20.1.2
    implementation 'androidx.localbroadcastmanager:localbroadcastmanager:1.0.0' // Note: this dependency is already depended on by at least com.google.firebase:firebase-messaging:20.1.2

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20160810'
}

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xdiags:verbose"
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.dcendents.android-maven'

def isSnapshot = version.endsWith('-SNAPSHOT')
task setVersion {
    // The version will be derived from source
    project.version = null
    def sdkVersionFile = file('src/main/java/com/wonderpush/sdk/WonderPush.java')
    sdkVersionFile.eachLine {
        def versionMatcher = (it =~ /(?:.*SDK_SHORT_VERSION = ")(.*)(?:".*)/)
        if (versionMatcher.matches()) {
            project.version = versionMatcher[0][1]
        }
    }
    if (project.version.is('unspecified')) {
        throw new GradleScriptException('Version could not be found.', null)
    }
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId = project.group
            artifactId = 'wonderpush-android-sdk'

            name 'WonderPush Android SDK'
            description 'WonderPush Android SDK'
            url 'https://github.com/wonderpush/wonderpush-android-sdk'

            scm {
                connection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                developerConnection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                url 'https://github.com/wonderpush/wonderpush-android-sdk'
            }

            licenses {
                license {
                    name 'Apache 2.0'
                    url 'https://github.com/wonderpush/wonderpush-android-sdk/blob/master/LICENSE.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'wonderpush'
                    name 'WonderPush'
                }
            }
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment {
            MavenDeployment deployment -> signing.signPom(deployment)
        }

        pom.project {
            packaging 'aar'
            groupId = project.group
            artifactId = 'wonderpush-android-sdk'

            name 'WonderPush Android SDK'
            description 'WonderPush Android SDK'
            url 'https://github.com/wonderpush/wonderpush-android-sdk'

            scm {
                connection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                developerConnection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                url 'https://github.com/wonderpush/wonderpush-android-sdk'
            }

            licenses {
                license {
                    name 'Apache 2.0'
                    url 'https://github.com/wonderpush/wonderpush-android-sdk/blob/master/LICENSE.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'wonderpush'
                    name 'WonderPush'
                }
            }
        }
    }
}
uploadArchives.dependsOn(install)

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    title = 'WonderPush Android SDK Reference'
    source = 'src/main/java/com/wonderpush/sdk' //android.sourceSets.main.java.srcDirs
    doFirst {
        classpath = project.files(
                project.android.libraryVariants.toList().first().javaCompileProvider.get().classpath.files,
                project.android.getBootClasspath(),
                android.sourceSets.main.java.srcDirs
        )
    }
    options.overview = project.rootDir.path + '/overview.html'
    options.showFromPublic()
    // JDK 1.8 is more strict then 1.7. Have JDK 1.8 behave like 1.7 for javadoc generation
    if (org.gradle.internal.jvm.Jvm.current().getJavaVersion() == JavaVersion.VERSION_1_8) {
        options.addStringOption('Xdoclint:none', '-quiet')
    }
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}

apply plugin: 'com.android.library'
apply plugin: 'com.jfrog.bintray'

project.group = 'com.wonderpush'
project.archivesBaseName = 'wonderpush-android-sdk'

android {
    compileSdkVersion 28
    buildToolsVersion "28.0.3"

    lintOptions {
        abortOnError false
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    defaultConfig {
        minSdkVersion 14
        consumerProguardFiles 'proguard-exported.pro'
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    implementation 'com.loopj.android:android-async-http:1.4.9'
    implementation 'com.huawei.hms:push:4.0.3.301'
    // Use the full support-v4 instead of the module support-compat
    // because com.google.firebase:firebase-messaging (indirectly) depends on it
    // and all modules must use the same version.
    implementation 'com.android.support:support-v4:28.0.0'
    implementation 'com.android.support.constraint:constraint-layout:1.1.3'
    implementation 'com.android.support:appcompat-v7:28.0.0'
    implementation 'com.android.support:customtabs:28.0.0'
    implementation 'com.android.support:cardview-v7:28.0.0'
    implementation 'com.google.android.gms:play-services-tasks:17.1.0'
    implementation 'com.google.dagger:dagger:2.24'
    annotationProcessor 'com.google.dagger:dagger-compiler:2.24'
    compileOnly 'com.google.code.findbugs:jsr305:3.0.2'

    implementation 'javax.inject:javax.inject:1'
    implementation 'io.reactivex.rxjava2:rxjava:2.1.14'
    implementation 'io.reactivex.rxjava2:rxandroid:2.0.2'
    implementation "com.squareup.picasso:picasso:2.71828"
    implementation "com.android.support:exifinterface:28.0.0" // necessary to bump dependency from picasso

    testImplementation 'junit:junit:4.12'
    testImplementation 'org.json:json:20160810'
}

if (file('local.gradle').exists()) {
    apply from: 'local.gradle'
}

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation" << "-Xdiags:verbose"
}

apply plugin: 'maven'
apply plugin: 'signing'
apply plugin: 'com.github.dcendents.android-maven'

def isSnapshot = version.endsWith('-SNAPSHOT')
task setVersion {
    // The version will be derived from source
    project.version = null
    def sdkVersionFile = file('src/main/java/com/wonderpush/sdk/WonderPush.java')
    sdkVersionFile.eachLine {
        def versionMatcher = (it =~ /(?:.*SDK_SHORT_VERSION = ")(.*)(?:".*)/)
        if (versionMatcher.matches()) {
            project.version = versionMatcher[0][1]
        }
    }
    if (project.version.is('unspecified')) {
        throw new GradleScriptException('Version could not be found.', null)
    }
}

install {
    repositories.mavenInstaller {
        pom.project {
            packaging 'aar'
            groupId = project.group
            artifactId = 'wonderpush-android-sdk'

            name 'WonderPush Android SDK'
            description 'WonderPush Android SDK'
            url 'https://github.com/wonderpush/wonderpush-android-sdk'

            scm {
                connection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                developerConnection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                url 'https://github.com/wonderpush/wonderpush-android-sdk'
            }

            licenses {
                license {
                    name 'Apache 2.0'
                    url 'https://github.com/wonderpush/wonderpush-android-sdk/blob/master/LICENSE.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'wonderpush'
                    name 'WonderPush'
                }
            }
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        beforeDeployment {
            MavenDeployment deployment -> signing.signPom(deployment)
        }

        pom.project {
            packaging 'aar'
            groupId = project.group
            artifactId = 'wonderpush-android-sdk'

            name 'WonderPush Android SDK'
            description 'WonderPush Android SDK'
            url 'https://github.com/wonderpush/wonderpush-android-sdk'

            scm {
                connection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                developerConnection 'scm:git@github.com:wonderpush/wonderpush-android-sdk.git'
                url 'https://github.com/wonderpush/wonderpush-android-sdk'
            }

            licenses {
                license {
                    name 'Apache 2.0'
                    url 'https://github.com/wonderpush/wonderpush-android-sdk/blob/master/LICENSE.txt'
                    distribution 'repo'
                }
            }

            developers {
                developer {
                    id 'wonderpush'
                    name 'WonderPush'
                }
            }
        }
    }
}
uploadArchives.dependsOn(install)

signing {
    required { !isSnapshot && gradle.taskGraph.hasTask("uploadArchives") }
    sign configurations.archives
}

task androidJavadocs(type: Javadoc) {
    title = 'WonderPush Android SDK Reference'
    source = [
            'src/main/java/com/wonderpush/sdk/DeepLinkEvent.java',
            'src/main/java/com/wonderpush/sdk/WonderPush.java',
            'src/main/java/com/wonderpush/sdk/WonderPushAbstractDelegate.java',
            'src/main/java/com/wonderpush/sdk/WonderPushChannel.java',
            'src/main/java/com/wonderpush/sdk/WonderPushChannelGroup.java',
            'src/main/java/com/wonderpush/sdk/WonderPushDelegate.java',
            'src/main/java/com/wonderpush/sdk/WonderPushFirebaseMessagingService.java',
            'src/main/java/com/wonderpush/sdk/WonderPushUserPreferences.java',
            'src/main/java/com/wonderpush/sdk/WonderPushInitializer.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingImpressionListener.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingClickListener.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/Text.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/ModalMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/Button.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/ImageData.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/BannerMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/CardMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/InAppMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/ImageOnlyMessage.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/model/MessageType.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingDisplayErrorListener.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessaging.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingDisplayCallbacks.java',
            'src/main/java/com/wonderpush/sdk/inappmessaging/InAppMessagingDisplay.java'
    ] //android.sourceSets.main.java.srcDirs
    doFirst {
        classpath = project.files(
                project.android.libraryVariants.toList().first().javaCompileProvider.get().classpath.files,
                project.android.getBootClasspath(),
                "$projectDir/build/intermediates/javac/release/compileReleaseJavaWithJavac/classes",
                "$projectDir/build/intermediates/javac/debug/compileDebugJavaWithJavac/classes",
                android.sourceSets.main.java.srcDirs
        )
    }
    options.overview = project.rootDir.path + '/overview.html'
    options.showFromPublic()
    // JDK 1.8 is more strict then 1.7. Have JDK 1.8 behave like 1.7 for javadoc generation
    options.addStringOption('Xdoclint:none', '-quiet')
}
project.afterEvaluate {
    androidJavadocs.dependsOn(assembleDebug)
}

task androidJavadocsJar(type: Jar, dependsOn: androidJavadocs) {
    classifier = 'javadoc'
    from androidJavadocs.destinationDir
}

task androidSourcesJar(type: Jar) {
    classifier = 'sources'
    from android.sourceSets.main.java.sourceFiles
}

artifacts {
    archives androidSourcesJar
    archives androidJavadocsJar
}
